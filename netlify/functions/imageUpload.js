const formidable = require("formidable");
const fs = require("fs");
const FormData = require("form-data");
const fetch = require("node-fetch");

exports.handler = async function (event, context) {
  return new Promise((resolve, reject) => {
    // Parse the incoming request using formidable.
    const form = new formidable.IncomingForm({
      uploadDir: "/tmp",
      keepExtensions: true
    });

    form.parse(event, (err, fields, files) => {
      if (err) {
        console.error("Error parsing form:", err);
        return reject({
          statusCode: 500,
          body: JSON.stringify({ error: err.message })
        });
      }
      console.log("Parsed fields:", fields);
      console.log("Parsed files:", files);

      // Check required fields
      if (!fields.listingId || !fields.token || !fields.fileName || !files.file) {
        return resolve({
          statusCode: 400,
          body: JSON.stringify({ error: "Missing required parameters." })
        });
      }

      // Read the file data from the temporary file path
      fs.readFile(files.file.filepath, (readErr, fileData) => {
        if (readErr) {
          console.error("Error reading file:", readErr);
          return reject({
            statusCode: 500,
            body: JSON.stringify({ error: readErr.message })
          });
        }

        // Build the FormData payload to send to Etsy.
        const formData = new FormData();
        formData.append("listingId", fields.listingId);
        formData.append("token", fields.token);
        formData.append("fileName", fields.fileName);
        formData.append("rank", fields.rank || "1");
        formData.append("file", fileData, {
          filename: fields.fileName,
          contentType: files.file.mimetype
        });

        console.log("FormData prepared with file:", fields.fileName);
        // Retrieve CLIENT_ID and SHOP_ID from environment variables.
        const clientId = process.env.CLIENT_ID;
        const shopId = process.env.SHOP_ID;
        if (!clientId || !shopId) {
          return resolve({
            statusCode: 500,
            body: JSON.stringify({ error: "Missing CLIENT_ID or SHOP_ID in environment." })
          });
        }
        const etsyUploadUrl = `https://api.etsy.com/v3/application/shops/${shopId}/listings/${fields.listingId}/images`;
        console.log("Image Upload URL:", etsyUploadUrl);

        // Prepare headers (including the multipart/form-data headers generated by formData)
        const headers = {
          "Authorization": `Bearer ${fields.token}`,
          "x-api-key": clientId,
          ...formData.getHeaders()
        };
        console.log("Image upload request headers:", headers);

        // Make the POST request to the Etsy API.
        fetch(etsyUploadUrl, {
          method: "POST",
          headers: headers,
          body: formData
        })
          .then((res) => {
            console.log("Image upload response status:", res.status);
            return res.text().then((text) => {
              if (!res.ok) {
                console.error("Error uploading image. POST failed:", text);
                return resolve({
                  statusCode: res.status,
                  body: JSON.stringify({ error: "Error uploading image", details: text })
                });
              }
              console.log("Image uploaded successfully. Response text:", text);
              return resolve({
                statusCode: 200,
                body: text
              });
            });
          })
          .catch((fetchErr) => {
            console.error("Error during fetch for image upload:", fetchErr);
            return resolve({
              statusCode: 500,
              body: JSON.stringify({ error: fetchErr.message })
            });
          });
      });
    });
  });
};