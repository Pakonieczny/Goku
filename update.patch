diff --git a/Index.html b/Index.html
index 89abcdef..cdef0123 100644
--- a/Index.html
+++ b/Index.html
@@ In the global variables section near where photoIds is declared
-    let photoIds = [];
+    let photoIds = [];
+    let nonReservedUploadedFlags = [];
@@ In the drop event handler for images (look for where a stable ID is created)
-            // Create stable ID
-            photoIds.push('img-' + Date.now() + '-' + i);
+            // Create stable ID and initialize upload flag to false
+            photoIds.push('img-' + Date.now() + '-' + i);
+            nonReservedUploadedFlags.push(false);
@@ In the "uploadPhotoBtn" click handler (nonâ€‘reserved photo uploads)
-  for (let i = 0; i < previewImages.length; i++) {
-    const dataURL = previewImages[i];
-    const altText = photoMeta[i] || "";
-    const rankNumber = i + 1;
-    try {
-      const res = await fetch(dataURL);
-      const blob = await res.blob();
-      const formData = new FormData();
-      formData.append("listingId", listingId);
-      formData.append("token", accessToken);
-      formData.append("fileName", photoNames[i] || `uploaded_photo_${i}.jpg`);
-      formData.append("rank", rankNumber);
-      formData.append("alt_text", altText);
-      formData.append("file", blob, photoNames[i] || `uploaded_photo_${i}.jpg`);
-      const uploadUrl = `/.netlify/functions/imageUpload`;
-      const response = await fetch(uploadUrl, {
-        method: "POST",
-        body: formData
-      });
-      if (!response.ok) {
-        M.toast({ html: `Error uploading photo #${rankNumber}: ` + response.status });
-      } else {
-        M.toast({ html: `Photo #${rankNumber} uploaded with alt_text!` });
-      }
-    } catch (e) {
-      console.error(`Exception uploading photo #${rankNumber}:`, e);
-      M.toast({ html: `Exception uploading photo #${rankNumber}: ${e.message}` });
-    }
-  }
+  for (let i = 0; i < previewImages.length; i++) {
+    if (!nonReservedUploadedFlags[i]) {
+      const dataURL = previewImages[i];
+      const altText = photoMeta[i] || "";
+      const rankNumber = i + 1;
+      try {
+        const res = await fetch(dataURL);
+        const blob = await res.blob();
+        const formData = new FormData();
+        formData.append("listingId", listingId);
+        formData.append("token", accessToken);
+        formData.append("fileName", photoNames[i] || `uploaded_photo_${i}.jpg`);
+        formData.append("rank", rankNumber);
+        formData.append("alt_text", altText);
+        formData.append("file", blob, photoNames[i] || `uploaded_photo_${i}.jpg`);
+        const uploadUrl = `/.netlify/functions/imageUpload`;
+        const response = await fetch(uploadUrl, {
+          method: "POST",
+          body: formData
+        });
+        if (!response.ok) {
+          M.toast({ html: `Error uploading photo #${rankNumber}: ` + response.status });
+        } else {
+          M.toast({ html: `Photo #${rankNumber} uploaded with alt_text!` });
+        }
+        nonReservedUploadedFlags[i] = true;
+      } catch (e) {
+        console.error(`Exception uploading photo #${rankNumber}:`, e);
+        M.toast({ html: `Exception uploading photo #${rankNumber}: ${e.message}` });
+      }
+    }
+  }
